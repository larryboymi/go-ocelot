// Automatically generated by MockGen. DO NOT EDIT!
// Source: routes/routes.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/ocelotconsulting/go-ocelot/types"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) Routes() map[string]types.Route {
	ret := _m.ctrl.Call(_m, "Routes")
	ret0, _ := ret[0].(map[string]types.Route)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Routes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Routes")
}

func (_m *MockRepository) DeleteRoute(id string) (int, error) {
	ret := _m.ctrl.Call(_m, "DeleteRoute", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRoute", arg0)
}

func (_m *MockRepository) UpdateRoute(route types.Route) {
	_m.ctrl.Call(_m, "UpdateRoute", route)
}

func (_mr *_MockRepositoryRecorder) UpdateRoute(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateRoute", arg0)
}

func (_m *MockRepository) Start() {
	_m.ctrl.Call(_m, "Start")
}

func (_mr *_MockRepositoryRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}
